// Generated by gencpp from file teamwork/KeyData.msg
// DO NOT EDIT!


#ifndef TEAMWORK_MESSAGE_KEYDATA_H
#define TEAMWORK_MESSAGE_KEYDATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace teamwork
{
template <class ContainerAllocator>
struct KeyData_
{
  typedef KeyData_<ContainerAllocator> Type;

  KeyData_()
    : router_key()
    , display_key()  {
    }
  KeyData_(const ContainerAllocator& _alloc)
    : router_key(_alloc)
    , display_key(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _router_key_type;
  _router_key_type router_key;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _display_key_type;
  _display_key_type display_key;





  typedef boost::shared_ptr< ::teamwork::KeyData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::teamwork::KeyData_<ContainerAllocator> const> ConstPtr;

}; // struct KeyData_

typedef ::teamwork::KeyData_<std::allocator<void> > KeyData;

typedef boost::shared_ptr< ::teamwork::KeyData > KeyDataPtr;
typedef boost::shared_ptr< ::teamwork::KeyData const> KeyDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::teamwork::KeyData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::teamwork::KeyData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::teamwork::KeyData_<ContainerAllocator1> & lhs, const ::teamwork::KeyData_<ContainerAllocator2> & rhs)
{
  return lhs.router_key == rhs.router_key &&
    lhs.display_key == rhs.display_key;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::teamwork::KeyData_<ContainerAllocator1> & lhs, const ::teamwork::KeyData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace teamwork

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::teamwork::KeyData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::teamwork::KeyData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::teamwork::KeyData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::teamwork::KeyData_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::teamwork::KeyData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::teamwork::KeyData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::teamwork::KeyData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "479cab83ef8c9b1034cf5fc201002f01";
  }

  static const char* value(const ::teamwork::KeyData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x479cab83ef8c9b10ULL;
  static const uint64_t static_value2 = 0x34cf5fc201002f01ULL;
};

template<class ContainerAllocator>
struct DataType< ::teamwork::KeyData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "teamwork/KeyData";
  }

  static const char* value(const ::teamwork::KeyData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::teamwork::KeyData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# KeyData.msg\n"
"string router_key\n"
"string display_key\n"
"\n"
;
  }

  static const char* value(const ::teamwork::KeyData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::teamwork::KeyData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.router_key);
      stream.next(m.display_key);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct KeyData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::teamwork::KeyData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::teamwork::KeyData_<ContainerAllocator>& v)
  {
    s << indent << "router_key: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.router_key);
    s << indent << "display_key: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.display_key);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TEAMWORK_MESSAGE_KEYDATA_H
